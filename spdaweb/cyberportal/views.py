from django.shortcuts import render
from django.http import JsonResponse
from .models import Project, Vulnerability, VulnerabilityDB, ExternalPentest
from .forms import ProjectForm, VulnerabilityForm, ExternalPentestForm
import json
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import get_object_or_404
from django.shortcuts import redirect

# Create your views here.
def index(request):
    projects = Project.objects.all()
    # print(projects)
    return render(request, 'index.html', {'projects': projects})

def project_detail(request, slug):
    project = get_object_or_404(Project, slug=slug)
    vulnerabilities = project.vulnerabilities.all()
    return render(request, 'Projects.html', {'project': project, 'vulnerabilities': vulnerabilities})

def add_project(request):
    if request.method == 'POST':
        form = ProjectForm(request.POST, request.FILES)
        print("Form errors:", form.errors)  # Print out form errors for debugging
        if form.is_valid():
            form.save()
            return JsonResponse({'success': True})  # You can customize the response as needed
        else:
            errors = form.errors.as_json()
            return JsonResponse({'success': False, 'errors': errors}, status=400)  # You can customize the response as needed
    else:
        form = ProjectForm()
    return render(request, 'index.html', {'form': form})


@csrf_exempt
def update_project(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        project_id = data.get('id')
        description = data.get('description')
        summary = data.get('summary')
        status = data.get('status')
        type = data.get('type')
        scope = data.get('scope')
        solution=data.get('vulnerabilitysolution')

        try:
            project = Project.objects.get(id=project_id)
            project.description = description
            project.summary = summary
            project.status = status
            project.type = type
            project.scope = scope
            project.solution = solution
            project.save()
            return JsonResponse({'success': True})
        except Project.DoesNotExist:
            return JsonResponse({'success': False, 'errors': 'Project not found'}, status=404)
        except Exception as e:
            return JsonResponse({'success': False, 'errors': str(e)}, status=500)


def add_vulnerability(request, slug):

    project = get_object_or_404(Project, slug=slug)
    projects=Project.objects.all()
    if request.method == 'POST':
        form = VulnerabilityForm(request.POST)
        print(form.errors)
        if form.is_valid():
            vulnerability = form.save(commit=False)
            vulnerability.project = project
            vulnerability.save()
            return redirect('project_detail', slug=project.slug)
    else:
        form = VulnerabilityForm()
    return render(request, 'Projects.html', {'form': form, 'project': project, 'projects': projects})

def edit_vulnerability(request, vulnerability_id):
    vulnerability = get_object_or_404(Vulnerability, pk=vulnerability_id)
    if request.method == 'POST':
        form = VulnerabilityForm(request.POST, instance=vulnerability)
        if form.is_valid():
            form.save()
            return redirect('project_detail', project_id=vulnerability.project.id)
    else:
        form = VulnerabilityForm(instance=vulnerability)
    return render(request, 'projects.html', {'form': form, 'vulnerability': vulnerability})


def vulnerabilitydb(request):
    vulnerabilities = VulnerabilityDB.objects.all()
    return render(request, 'VulnDB.html', {'vulnerabilities': vulnerabilities})


def External_pentest_view(request):
    if request.method == 'POST':
        form = ExternalPentestForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('External_pentest_view')  # Redirect to the same page to avoid resubmission
    else:  # If it's not a POST request, assume it's a GET request
        form = ExternalPentestForm()
    
    externalpentests = ExternalPentest.objects.all()
    return render(request, 'ExternalPentest.html', {'form': form, 'externalpentests': externalpentests})


import xml.etree.ElementTree as ET
import re
import requests
import os
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from .models import Vulnerability
from django.utils import timezone
from datetime import datetime

@csrf_exempt  # Disable CSRF protection for simplicity, consider enabling it in production@csrf_exempt



def process_xml_upload(request, project_id):
    # Retrieve the current project
    current_project = get_object_or_404(Project, id=project_id)

    if request.method == 'POST' and request.FILES.get('xml_file'):
        xml_file = request.FILES['xml_file']
        tree = ET.parse(xml_file)
        root = tree.getroot()
        vulnerabilities_created = 0

        for item in root.findall('.//item'):
            title = item.find('title').text.strip()
            description = remove_html_tags(item.find('description').text.strip())
            assignee_element = item.find(".//assignee")
            open_date_str = item.find(".//created").text.strip()
            closure_date_str = item.find(".//updated").text.strip()
            assignee = assignee_element.text.strip() if assignee_element is not None else "N/A"
            vulnerabilitysolution=item.find(".//Recommendation").text.strip()
            attachments = [(attachment.attrib['name'], attachment.attrib['id']) for attachment in item.findall(".//attachments/attachment")]

            if 'Recommendation:' in description:
                recommendations = description.split('Recommendation:')[1].split('If we')[0].strip()
            else:
                recommendations = "No recommendations found."

            print(recommendations)

            vulnerabilities_created += 1

            # Convert date strings to datetime objects
            open_date = datetime.strptime(open_date_str, "%a, %d %b %Y %H:%M:%S %z")
            closure_date = datetime.strptime(closure_date_str, "%a, %d %b %Y %H:%M:%S %z")

            # Convert datetime objects to the desired format
            open_date_formatted = open_date.strftime("%Y-%m-%d")
            closure_date_formatted = closure_date.strftime("%Y-%m-%d")

            vulnerability = Vulnerability(
                project=current_project,  # Associate with the current project
                vulnerabilityname=title,
                vulnerabilityseverity="N/A",
                cvssscore=None,
                status="N/A",
                vulnerabilitydescription=description,
                poc="",
                vulnerabilitysolution=recommendations,
                vulnerabilityreferlnk="",
                open_date=open_date_formatted,
                closure_date=closure_date_formatted
            )
            vulnerability.save()

            # Download attachments
            for attachment_name, attachment_id in attachments:
                attachment_url = f"https://vfg-m.atlassian.net/secure/attachment/{attachment_id}/{attachment_name}"
                response = requests.get(attachment_url)
                if response.status_code == 200:
                    with open(f'attachments/{attachment_name}', 'wb') as f:
                        f.write(response.content)

        return HttpResponse(f"{vulnerabilities_created} vulnerabilities created successfully.")
    else:
        return HttpResponse("Please upload an XML file.")



# Function to remove HTML tags from text
def remove_html_tags(text):
    clean = re.compile('<.*?>')
    return re.sub(clean, '', text)
