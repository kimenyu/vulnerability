from django.db import models
from datetime import date
from django.contrib.auth.models import User
from django.utils import timezone
from django.utils.text import slugify
# Create your models here.
class Project(models.Model):
    name = models.CharField(max_length=100)
    scope = models.CharField(max_length=100)
    Description = models.TextField()
    projecttype = models.CharField(max_length=100)
    startdate = models.DateField()
    enddate = models.DateField()
    Type_of_project = models.CharField(max_length=20, default="Internal")
    status=models.CharField(max_length=100, default='In Dev')
    version=models.CharField(max_length=100, default="1.0.0")
    go_live_date=models.DateField(default=date.today)
    pdf_file = models.FileField(upload_to='Files/', blank=True, null=True)
    slug = models.SlugField(unique=True, blank=True)
    created_at=models.DateTimeField(auto_now_add=True)
    updated_at=models.DateTimeField(auto_now=True)


    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
            # Ensure the slug is unique
            unique_slug = self.slug
            num = 1
            while Project.objects.filter(slug=unique_slug).exists():
                unique_slug = f'{self.slug}-{num}'
                num += 1
            self.slug = unique_slug
        super(Project, self).save(*args, **kwargs)

    class Meta:
        verbose_name = "Project"
        verbose_name_plural = "Projects"


class Vulnerability(models.Model):
    project = models.ForeignKey(Project, related_name='vulnerabilities', on_delete=models.CASCADE)
    vulnerabilityname = models.CharField(max_length=255)
    vulnerabilityseverity = models.CharField(max_length=300, null=True)
    cvssscore = models.FloatField(blank=True, null=True)
    # cvssvector = models.CharField(max_length=300, default=None, null=True)
    status = models.CharField(max_length=300, null=True)
    vulnerabilitydescription = models.TextField()
    poc = models.TextField(default=None, blank=True, null=True) 
    created = models.DateTimeField(editable=False, default=timezone.now)
    vulnerabilitysolution = models.TextField() 
    vulnerabilityreferlnk = models.TextField() 
    open_date = models.DateField(default=timezone.now) 
    closure_date = models.DateField(default=timezone.now)  


class VulnerabilityDB(models.Model):
    vulnerabilityid =models.CharField(max_length=300, unique=True)
    Vulnerabilityname = models.CharField(max_length=300)
    vulnerabilityseverity = models.CharField(max_length=300, null=True)
    cvssscore = models.FloatField()
    cvssvector = models.CharField(max_length=300, default=None, null=True)
    status = models.CharField(max_length=300, null=True)
    vulnerabilitydescription = models.TextField(blank=True, null=True)
    vulnerabilitysolution = models.TextField() 
    vulnerabilityreferlnk = models.TextField() 

    def __str__(self):
        return self.vulnerabilityname
    

class ExternalPentest(models.Model):
    name=models.CharField(max_length=300)
    Description=models.TextField()
    created = models.DateTimeField(editable=False, default=timezone.now)
    pdf_file = models.FileField(upload_to='Files/', blank=True, null=True)
    EndDate=models.DateField(default=timezone.now)
    ProjectInvolvement_user= models.CharField(max_length=300)
    ProjectInvolvement_email= models.CharField(max_length=300)
    ProjectInvolvement_phone= models.CharField(max_length=300)

    def __str__(self):
        return self.name    





